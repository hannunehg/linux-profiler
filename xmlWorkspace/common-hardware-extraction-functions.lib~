#!/bin/bash

hardwareInfo="._hardware.info"
OEMMsg="To be filled by O.E.M."
nullMsg=""

  systemNodeNumber=1
  osNodeNumber=2
  cpuNodeNumber=3
  drivesNodeNumber=5
  memoryNodesNumber=4
  networkNodesNumber=6


# Ubuntu Initialization steps: store lshw output in file for later access
function Init() {
  case $OS in
    Linux)
    	sudo lshw > $hardwareInfo;;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

#TODO: recall this after development is done
if [[ -z  $DEVELOPER  ]]
then
  Init
fi



#-------------------Hw Inventory Node XML Record Formatter---------------------#
thisScriptName=$(basename ${BASH_SOURCE[0]})
# This function will not echo anything if the value is empty
function generateHwInventoryXmlRecord() {

if [[ ! -z $item && ${item+x} ]]
then
  item="<![CDATA[$item]]>"
fi

if [[ ! -z $attribute && ${attribute+x} ]]
then
  attribute="<![CDATA[$attribute]]>"
fi

if [[ ! -z $value && ${value+x} ]]
then
  value="<![CDATA[$value]]>"
else
  return
fi

echo -e "<record>
    <node>$node</node>
    <item>$item</item>
    <attribute>$attribute</attribute>
    <value>$value</value>
</record>"
}


#-------------------------------Common Functions-------------------------------#

function manufacturerNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 2 | awk -F ": " '(NR == 6){ print $2 }';;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
# Motherboard version
function versionNode() {
  case $OS in
    *)		
      sudo dmidecode -t 2 | awk -F ": " '/Version/{ print $2 }'
    ;;
  esac
}
function partnumberNode() {
case $OS in
    *)		
      echo "$nullMsg"
    ;;
  esac
}
function serialnumberNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 2 | awk -F ": " '(NR == 9){ print $2 }';;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function biosNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 0 |
        awk -F ": " '(NR == 7){ print $2 }' | tr -d ' ';;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function displayadaptersNode() {
  case $OS in
    Linux)
    	 sudo lspci | awk -F ": " '/VGA/{ print $2}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function chassisNode() {
  case $OS in
    Linux)
    	 chasisTypes "$(sudo dmidecode -t 3 | awk -F ": " '/Type:/{print $2}')";;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function physicalmemoryNode() {
  case $OS in
    Linux)
    	 sudo dmidecode memory | awk -v "found=0" 'BEGIN{ OFMT = "%.0f"; mSize=0; totalSize=0} /Size/{mSize=$2*1024*1024;} /DIMM[0-9]/{ found=NR ; totalSize+=mSize} END{print totalSize}'
;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}

function visiblememoryNode() {
  case $OS in
    Linux)
    	 free | awk 'BEGIN{ OFMT = "%.0f"; }/Mem/{print $2*1024}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function drivesInfoXml() {
  node=$drivesNodeNumber
  case $OS in
    Linux)
    awkScriptMaker ubuntuDrivesNodeEnumerator
    ;;
    *)	
      echo "Unsupported OS: $OS" >&2;;
  esac
}





#------------------------------Auxiliary Functions-----------------------------#

function awkScriptMaker() {

  tmpAwkOutputScript="._tmp-awk-output.sh-$1"
  executePassedAwk $1 > $tmpAwkOutputScript
  sudo chmod +x $tmpAwkOutputScript  
  ./$tmpAwkOutputScript
}

function executePassedAwk() {
  echo "#!/bin/bash"
  echo ". $thisScriptName"
  $1
}

function chasisTypes() {
case $1 in
    Other)
    	 echo 1;;	
    Unknown)
    	 echo 2;;
    Desktop)
    	 echo 3;;
    "Low Profile Desktop")
    	 echo 4;;
    "Pizza Box")
    	 echo 5;;
    "Mini Tower")
    	 echo 6;;
    Tower)
    	 echo 7;;
    Portable)
    	 echo 8;;
    Laptop)
    	 echo 9;;
    Notebook)
    	 echo 10;;
    "Hand Held")
    	 echo 11;;
    "Docking Station")
    	 echo 12;;
    "All in One")
    	 echo 13;;
    "Sub Notebook")
    	 echo 14;;
    "Space-Saving")
    	 echo 15;;
    "Lunch Box")
    	 echo 16;;
    "Main System Chassis")
    	 echo 17;;
    "Expansion Chassis")
    	 echo 18;;
    "Sub Chassis")
    	 echo 19;;
    "Bus Expansion Chassis")
    	 echo 20;;
    "Peripheral Chassis")
    	 echo 21;;
    "Storage Chassis")
    	 echo 22;;
    "Rack Mount Chassis")
    	 echo 23;;
    "Sealed-Case PC")
    	 echo 24;;
    *)		
      echo -1 
      echo "Unsupported Chassis type: $1" >&2;;
esac
}



