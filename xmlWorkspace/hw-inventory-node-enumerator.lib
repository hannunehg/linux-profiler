#!/bin/bash
. common-hardware-extraction-functions.lib

#--------------------------- Parent Nodes functions ---------------------------#
function systemNodeEnumerator() {
  #1
  node=$systemNodeNumber
  
  item="Motherboard"
  attribute="Manufacturer"
  value=$(manufacturerNode) 
  generateHwInventoryXmlRecord
  
  item="Motherboard"
  attribute="Version"
  value=$(versionNode)
  generateHwInventoryXmlRecord

  item="Motherboard"
  attribute="Product Number"
  value=$(partnumberNode)
  generateHwInventoryXmlRecord  
  
  item="Motherboard"
  attribute="Serial Number"
  value=$(serialnumberNode)
  generateHwInventoryXmlRecord 
  
  item="Motherboard"
  attribute="BIOS"
  value=$(biosNode)
  generateHwInventoryXmlRecord
  
  item="Display Adapter"
  attribute="Model"
  value=$(displayadaptersNode)
  generateHwInventoryXmlRecord
  
  item="Enclosure"
  attribute="Chassis"
  value=$(chassisNode)
  generateHwInventoryXmlRecord
}

function osNodeEnumerator() {
  #2
  node=$osNodeNumber

  item="Operating System"  
  attribute="Manufacturer"
  value=$(osManufacturerNode)
  generateHwInventoryXmlRecord
  
  item="Operating System"
  attribute="Type"
  value=$(osTypeNode)
  generateHwInventoryXmlRecord
  
  item="Operating System"
  attribute="Version"
  value=$(osVersionNode)
  generateHwInventoryXmlRecord
  
  # N/A -> this outputs empty value so it is not printed
  item="Operating System"
  attribute="Service Pack"
  value=$(osServicePackNode)
  generateHwInventoryXmlRecord
 
  item="Operating System"
  attribute="Install Date"
  value=$(osInstallDateNode)
  generateHwInventoryXmlRecord
  
  item="Operating System"
  attribute="Architecture"
  value=$(osArchitectureNode)
  generateHwInventoryXmlRecord
  
  # N/A -> this outputs empty value so it is not printed
  item="Operating System"
  attribute="Role"
  value=$(osRoleNode)
  generateHwInventoryXmlRecord
  
  # Linux exclusive (no windows match)
  item="Operating System"
  attribute="Description"
  value=$(osDescriptionNode)
  generateHwInventoryXmlRecord
}

function cpuNodeEnumerator() {
  node=$cpuNodeNumber
  case $OS in
    Linux)
      awkScriptMaker ubuntuCpuNodeAwkScript ;;
    *)	
      echo "Unsupported OS: $OS" >&2;;
  esac	
}

function memoryNodeEnumerator() {
  node=$memoryNodesNumber
  case $OS in
    Linux)
      awkScriptMaker ubuntuMemoryNodeAwkScript 
      item="Physical"
      attribute="Total"
      value=$(physicalmemoryNode)
      generateHwInventoryXmlRecord
      item="Visible"
      attribute="Total"
      value=$(visiblememoryNode)
      generateHwInventoryXmlRecord
      ;;
    *)	
      echo "Unsupported OS: $OS" >&2;;
  esac	 
}

function drivesNodeEnumerator() {
  drivesInfoXml
}

function networkNodesEnumerator() {
  case $OS in
    Linux)
      awkScriptMaker ubuntuNetworkNodesEnumerator 
	
  	  ;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

#----------------------Hw Inventory Info Functions-----------------------------#

function ubuntuCpuNodeAwkScript() {
  echo "node=$cpuNodeNumber"
  cat /proc/cpuinfo|     
    awk -F ": " '
    /processor/{
    procId="CPU"$2
    }
    /vendor_id/{ 
      print "item=\""procId"\" attribute=\"Manufacturer\" value=\""$2"\" generateHwInventoryXmlRecord; ";     
    }
    /model/{
      if ( $1 ~ "model name" ) {
        print "item=\""procId"\" attribute=\"Name\" value=\""$2"\" generateHwInventoryXmlRecord; "
      } else {
        print "item=\""procId"\" attribute=\"Version\" value=\""$2"\" generateHwInventoryXmlRecord; "; 
      }
    }
    /cpu MHz/{
      print "item=\""procId"\" attribute=\"Speed\" value=\""$2"\" generateHwInventoryXmlRecord; "
    }
    '
}

function ubuntuMemoryNodeAwkScript() {
  echo "node=$memoryNodesNumber"
  sudo dmidecode memory | 
    awk -F ": " '
    BEGIN{ OFMT = "%.0f"; found=0;mSize=0; freeSlots=0} 
    /Size: [0-9]/{mSize=$2*1024*1024;} 
    /Speed/{mSpeed=$2;}
    /Form Factor/{mFormFactor=$2;if (mSize != 0 ) {found=1; }}
    /Locator/{ 
      if ( $1 ~ /Bank Locator/ ) {
        mBank=$2;
      } else {
        dimId=$2;
      }
    }
    /^$/ {   
      if (found > 0) {
        if (mSize+0 == 0){ freeSlots++}
        
        print "item=\""dimId"\" attribute=\"Size\" value=\""mSize"\" generateHwInventoryXmlRecord; ";
        print "item=\""dimId"\" attribute=\"Speed\" value=\""mSpeed"\" generateHwInventoryXmlRecord; ";
        print "item=\""dimId"\" attribute=\"Form Factor\" value=\""mFormFactor"\" generateHwInventoryXmlRecord; ";
        print "item=\""dimId"\" attribute=\"Bank Label\" value=\""mBank"\" generateHwInventoryXmlRecord; ";

        mSize=0; found = 0;
      }
    }
    END{ print "item=\"Physical\" attribute=\"Free Memory Slots\" value=\""freeSlots"\" generateHwInventoryXmlRecord; "; }
    '
}

function ubuntuDrivesNodeEnumerator() {
  echo "node=$drivesNodeNumber"

  cat $hardwareInfo | 
  awk -F ": " '
  BEGIN{
  nodesFound=0;

  nodeType=0;
  found=0;
  iType="SCSI";

  }
  function printCdRomInfo() {
    print "item=\""diskNum"\" attribute=\"Model\" value=\""vendor" "product"\" generateHwInventoryXmlRecord; "; 
    vendor=""; product="";
    diskNum++;
  }
  function printDiskInfo() {
    print "item=\""diskNum"\" attribute=\"Model\" value=\""vendor" "product"\" generateHwInventoryXmlRecord; ";
    print "item=\""diskNum"\" attribute=\"Interface Type\" value=\""iType"\" generateHwInventoryXmlRecord; ";
    print "item=\""diskNum"\" attribute=\"Size\" value=\""size"\" generateHwInventoryXmlRecord; ";
    vendor=""; product="";size="";
    diskNum++;
  }
  function printOtherInfo() { 
    freeSpace="`sudo df -k -P "name" | awk '"'"'NR==2{print $4/(1024*1024)}'"'"'`";
    size="`sudo df -k -P "name" | awk '"'"'NR==2{print $2/(1024*1024)}'"'"'`";
    
    print "item=\""name"\" attribute=\"Partition Size (Gib)\" value=\""size"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Free Space (Gib)\" value=\""freeSpace"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Volume Name\" value=\""logicalName"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Volume Serial Number\" value=\""serial"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"File System\" value=\""description"\" generateHwInventoryXmlRecord; ";
    
    size = ""; freeSpace="";capacity= "";
    name="";serial="";description="";
    diskNum++;
  }
  
  function printPrevious() {
    if (nodesFound > 0) {
      #debug
      #print "type: "nodeType".Prev name: "name" "$0;
      if (nodeType == 0) {
        printOtherInfo();
      }
      if (nodeType == 1) {
        printCdRomInfo();
      } 
      if (nodeType == 2) {
        printDiskInfo();
      }
      name="";
    }
  }

  #### MAIN FLOW BELOW ####
  /\*-scsi/{ found=index($0, "-");nodeType=-1;next;}
  
  (found == 0){ next; }
  
  /\*-/{
    current=index($0, "-");
    if ( current <= found) {
      found = 0;
    }
    printPrevious();
    
    nodeType=0; 
    if ( $0 ~ "cdrom"){ nodeType=1;}
    if ( $0 ~ "disk"){ nodeType=2;}
    if ( $0 ~ "scsi"){nodeType=-1;}
    
    
    name="";
    nodesFound++;
    next;
  }
  /description:/{description=$2} 
  /product:/{product=$2}
  /vendor:/{vendor=$2} 
  /bus info:/{bus=$2} 
  /logical name:/{ if (name == "") {name=$2 } logicalName=$2;}
  /serial:/{serial=$2} 
  /size:/{size=$2} 
  /capacity:/{capacity=$2}
  '
}

function ubuntuNetworkNodesEnumerator() {

  dhcpFile="dhcp_file_notfound"
  if [ -f "/var/lib/dhcp3/dhclient.leases" ] 
  then
     dhcpFile="/var/lib/dhcp3/dhclient.leases"
  fi
  if [ -f "/var/lib/dhcp/dhclient.leases" ]
  then
     dhcpFile="/var/lib/dhcp/dhclient.leases"
  fi

  echo "node=$networkNodesNumber"

  cat $hardwareInfo | 
    awk -F ": " -vdhcpFile="$dhcpFile" '
    BEGIN{found=0; interfaceNum=10} 
    /\*-/{ if (found>0) {
      
      gateway="`ip -4 route list dev "logicalName" exact 0/0 | awk '"'"'{print $3}'"'"'`";
      dnsDomain="`uname -n`.`cat \""dhcpFile"\" | awk -F\"[ ;]\" -vname="logicalName" '"'"'/interface/{found=0; if ( $0 ~ name) { found=1}} (found ==1) &&/domain-name /{dnsIp=$5}END{print dnsIp}'"'"' | xargs echo`";
      dns="`nm-tool | awk -vname="logicalName" '"'"'BEGIN{ORS=\"|\";}/Device/{found=0; if ( $0 ~ name){ found=1} } (found ==1) && /DNS:/{print $2}'"'"'`";
      dhcp="`cat \""dhcpFile"\" | awk -F\"[ ;]\" -vname="logicalName" '"'"'/interface/{found=0; if ( $0 ~ name) { found=1}} (found ==1) &&/dhcp-server-identifier/{dhcpIp=$5}END{print dhcpIp}'"'"'`";
      
      
      print "item=\""interfaceNum"\" attribute=\"Model\" value=\""vendor" "product"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"MAC Address\" value=\""serial"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"IP Addresses\" value=\""ipFour"|"ipSix"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"Default Gateway\" value=\""gateway"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"DNS Domain\" value=\""dnsDomain"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"DHCP Server\" value=\""dhcp"\" generateHwInventoryXmlRecord; ";
      print "item=\""interfaceNum"\" attribute=\"DNS Servers\" value=\""dns"\" generateHwInventoryXmlRecord; ";
      
      found = 0;
      vendor=""; product=""; ipFour=""; ipSix=""; serial="";
      interfaceNum++;
    }}  
    /-network/{found=NR;}
    (found == 0)  { next;}
    /vendor/ {vendor=$2} 
    /logical name:/{logicalName=$2}
    /product/{product=$2} 
    /serial:/{
    serial=$2; cmd1="sudo ifconfig | grep -i "$2" -A3 | awk '"'"' /inet6/{split($3,params, \"/\"); print params[1]}'"'"'";cmd1 | getline ipSix} 
    /configuration:/{
    configs=$2; cmd="echo " configs " | awk -F '"'[= ]'"' '"'"'{ print $12 }'"'"' "; cmd | getline ipFour
    }'
    
}


function osManufacturerNode() {
  case $OS in
    Linux)
    	 lsb_release -i -s;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

function osTypeNode() {
  case $OS in
    Linux)
    	 lsb_release -c -s;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

function osVersionNode() {
  case $OS in
    Linux)
    	 lsb_release -r -s;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

function osDescriptionNode() {
  case $OS in
    Linux)
    	 lsb_release -d -s;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function osInstallDateNode() {
case $OS in
    Linux)
    	 ls -ltc /var/log/installer --time-style=long-iso | awk 'NR==2{print$(NF-2)" "$(NF-1)}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function osArchitectureNode() {
uname -i
}


function osServicePackNode() {
echo "$nullMsg";
}

function osRoleNode() {
echo "$nullMsg";
}

function physicalmemoryNode() {
  case $OS in
    Linux)
    	 sudo dmidecode memory | awk -v "found=0" 'BEGIN{ OFMT = "%.0f"; mSize=0; totalSize=0} /Size/{mSize=$2*1024*1024;} /DIMM[0-9]/{ found=NR ; totalSize+=mSize} END{print totalSize}'
;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}


