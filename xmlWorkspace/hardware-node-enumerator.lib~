#!/bin/bash
# Each nod we fill in xmls is OS dependent, hence we put each command we use 
# in a function so that we could add each OS's relevant command
# 
# Example to add multi OS command:
# function osDependentFunction() {
#  OS=`uname`
#  case $OS in
#    Linux)
#     echo "called from Linux OS";;
#    Darwin)
#     echo "called from Linux Mac OS";;	
#    *)		
#      echo "Unsupported OS: $OS" >&2;;
#  esac 
# 
. common-hardware-extraction-functions.lib

#--------------------Hardware Node XML Record Formatter------------------------#
function generateHardwareXmlRecord() {
  
 
echo -e "<record>"
if [[ ! -z $manufacturer && ${manufacturer+x} ]]
then
  echo -e "    <manufacturer>$manufacturer</manufacturer>"
fi

if [[ ! -z $product && ${product+x} ]]
then
  echo -e "    <product>$product</product>"
fi

if [[ ! -z $version && ${version+x} ]]
then
  echo -e "    <version>$version</version>"
fi
if [[ ! -z $serialnumber && ${serialnumber+x} ]]
then
  echo -e "    <serialnumber>$serialnumber</serialnumber>"
fi
if [[ ! -z $bios && ${bios+x} ]]
then
  echo -e "    <bios>$bios</bios>"
fi
if [[ ! -z $os && ${os+x} ]]
then
  echo -e "    <os>$os</os>"
fi
if [[ ! -z $processors && ${processors+x} ]]
then
  echo -e "    <processors>$processors</processors>"
fi
if [[ ! -z $physicalmemory && ${physicalmemory+x} ]]
then
  echo -e "    <physicalmemory>$physicalmemory</physicalmemory>"
fi
if [[ ! -z $physicalmemorydet && ${physicalmemorydet+x} ]]
then
  echo -e "    <physicalmemorydet>$physicalmemorydet</physicalmemorydet>"
fi
if [[ ! -z $visiblememory && ${visiblememory+x} ]]
then
  echo -e "    <visiblememory>$visiblememory</visiblememory>"
fi
if [[ ! -z $displayadapters && ${displayadapters+x} ]]
then
  echo -e "    <displayadapters>$displayadapters</displayadapters>"
fi
if [[ ! -z $networkadapters && ${networkadapters+x} ]]
then
  echo -e "    <networkadapters>$networkadapters</networkadapters>"
fi
if [[ ! -z $diskdrives && ${diskdrives+x} ]]
then
  echo -e "    <diskdrives>$diskdrives</diskdrives>"
fi
if [[ ! -z $cdromdrives && ${cdromdrives+x} ]]
then
  echo -e "    <cdromdrives>$cdromdrives</cdromdrives>"
fi
if [[ ! -z $chassis && ${chassis+x} ]]
then
  echo -e "    <chassis>$chassis</chassis>"
fi
echo -e "</record>"
}
  
#-------------------------------Hardware Node Functions-------------------------------#
function productNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 2 | awk -F ": " '(NR == 7){ print $2 }';;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function osNode() {
  case $OS in
    Linux)
    	uname -osrv;;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function processorsNode() {
  
  case $OS in
    Linux)
    	cat /proc/cpuinfo|
        awk -F ": " '/model name/{ print $2}'| head -n 1;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}

function physicalmemorydetNode() {
  case $OS in
    Linux)
    	 sudo dmidecode memory | awk -v "found=0" 'BEGIN{ OFMT = "%.0f"; mSize=0; dimNum=0; ORS="; "} /Size/{mSize=$2;} /DIMM[0-9]/{ found=NR ;} (found !=0) && (NR == found ){ dimNum=$2 } (found!=0) && (NR == found + 4){ print "["dimNum"] " mSize*1024*1024"/"$2}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
  
}
function diskdrivesNode() {
drivesInfoXml |  awk -F "[\[\]]" '(value == "Model"){model=$3;} (value == "Interface Type"){iType=$3;}  (value == "Size"){size=$3} {value=$3;} (model != "") && (iType != "") &&(size != "")  {print model" ["size" "iType"];"; model=""; iType=""; size="";} '

}
function networkadaptersNode() {
  case $OS in
    Linux)
      cat $hardwareInfo | 
        awk -F ": " '
        BEGIN{found=0; } 
        /\*-/{ if (found>0) {
          print vendor" "product" ["serial"]["ipFour"|"ipSix"];";
          found = 0;
        }}  
        /-network/{found=NR;}
        (found == 0)  { next;}
        /vendor/ {vendor=$2} 
        /product/{product=$2} 
        /serial:/{
        serial=$2; cmd1="sudo ifconfig | grep -i "$2" -A3 | awk '"'"' /inet6/{print $3}'"'"'";cmd1 | getline ipSix} 
        /configuration:/{
        configs=$2; cmd="echo " configs " | awk -F '"'[= ]'"' '"'"'{ print $12 }'"'"' "; cmd | getline ipFour
        }'
  	  ;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

function cdromdrivesNode() {
  case $OS in
    Linux)
    	  sudo cat $hardwareInfo | awk -F ": " '/\*-/{found=0} /\*-cdrom/{found=1} (found == 1) {print $0} ' | awk -F ": " '/description/{description=$2} /product/{product=$2}/vendor/{vendor=$2} END{print vendor" "description" "product}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

#TODO: now we print only 0 as linux Operating systems do not have this property
function domainroleNode() {
  case $OS in
    Linux)
    	 echo 0;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}

