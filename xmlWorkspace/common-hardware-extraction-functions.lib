#!/bin/bash

hardwareInfo="._hardware.info"
# Unused
OEMMsg="To be filled by O.E.M."
# Must output empty string so we do not print in xml, so we use this var
nullMsg=""

systemNodeNumber=1
osNodeNumber=2
cpuNodeNumber=3
drivesNodeNumber=5
memoryNodesNumber=4
networkNodesNumber=6
 
# Ubuntu Initialization steps: store lshw output in file for later access
function Init() {
  case $OS in
    Linux)
    	sudo lshw > $hardwareInfo;;
    	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
if [[ -z  $DEVELOPER  ]]
then
  Init
fi
#-------------------------------Common Functions-------------------------------#
function manufacturerNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 2 | awk -F ": " '(NR == 6){ print $2 }';;
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
# Motherboard version
function versionNode() {
  case $OS in
    *)		
      sudo dmidecode -t 2 | awk -F ": " '/Version/{ print $2 }'
    ;;
  esac
}
function partnumberNode() {
case $OS in
    *)		
      echo "$nullMsg"
    ;;
  esac
}
function serialnumberNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 2 | awk -F ": " '(NR == 9){ print $2 }';;
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function biosNode() {
  case $OS in
    Linux)
    	sudo dmidecode -t 0 |
        awk -F ": " '(NR == 7){ print $2 }' | tr -d ' ';;  	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function displayadaptersNode() {
  case $OS in
    Linux)
    	 sudo lspci | awk -F ": " '/VGA/{ print $2}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function chassisNode() {
  case $OS in
    Linux)
    	 chasisTypes "$(sudo dmidecode -t 3 | awk -F ": " '/Type:/{print $2}')";;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function physicalmemoryNode() {
  case $OS in
    Linux)
    	 sudo dmidecode memory | 
    	  awk -v "found=0" '
    	  BEGIN{ OFMT = "%.0f"; mSize=0; totalSize=0} 
    	  /Size/{mSize=$2*1024*1024;} 
    	  /DIMM[0-9]/{ found=NR ; totalSize+=mSize} 
    	  END{print totalSize}'
      ;;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac 
}
function visiblememoryNode() {
  case $OS in
    Linux)
    	 free | awk 'BEGIN{ OFMT = "%.0f"; }/Mem/{print $2*1024}';;	
    *)		
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function drivesInfoXml() {
  node=$drivesNodeNumber
  case $OS in
    Linux)
    awkScriptMaker ubuntuDrivesNodeEnumerator
    ;;
    *)	
      echo "Unsupported OS: $OS" >&2;;
  esac
}
function ubuntuDrivesNodeEnumerator() {
  echo "node=$drivesNodeNumber"

  cat $hardwareInfo | 
  awk -F ": " '
  BEGIN{
  nodesFound=0;

  nodeType=0;
  found=0;
  iType="SCSI";

  }
  function printCdRomInfo() {
    print "item=\""diskNum"\" attribute=\"Model\" value=\""vendor" "product"\" generateHwInventoryXmlRecord; "; 
    vendor=""; product="";
    diskNum++;
  }
  function printDiskInfo() {
    print "item=\""diskNum"\" attribute=\"Model\" value=\""vendor" "product"\" generateHwInventoryXmlRecord; ";
    print "item=\""diskNum"\" attribute=\"Interface Type\" value=\""iType"\" generateHwInventoryXmlRecord; ";
    print "item=\""diskNum"\" attribute=\"Size\" value=\""size"\" generateHwInventoryXmlRecord; ";
    vendor=""; product="";size="";
    diskNum++;
  }
  function printOtherInfo() { 
    freeSpace="`sudo df -k -P "name" | awk '"'"'NR==2{print $4/(1024*1024)}'"'"'`";
    size="`sudo df -k -P "name" | awk '"'"'NR==2{print $2/(1024*1024)}'"'"'`";
    
    print "item=\""name"\" attribute=\"Partition Size (Gib)\" value=\""size"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Free Space (Gib)\" value=\""freeSpace"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Volume Name\" value=\""logicalName"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"Volume Serial Number\" value=\""serial"\" generateHwInventoryXmlRecord; ";
    print "item=\""name"\" attribute=\"File System\" value=\""description"\" generateHwInventoryXmlRecord; ";
    
    size = ""; freeSpace="";capacity= "";
    name="";serial="";description="";
    diskNum++;
  }
  
  function printPrevious() {
    if (nodesFound > 0) {
      #debug
      #print "type: "nodeType".Prev name: "name" "$0;
      if (nodeType == 0) {
        printOtherInfo();
      }
      if (nodeType == 1) {
        printCdRomInfo();
      } 
      if (nodeType == 2) {
        printDiskInfo();
      }
      name="";
    }
  }

  #### MAIN FLOW BELOW ####
  /\*-scsi/{ found=index($0, "-");nodeType=-1;next;}
  
  (found == 0){ next; }
  
  /\*-/{
    current=index($0, "-");
    if ( current <= found) {
      found = 0;
    }
    printPrevious();
    
    nodeType=0; 
    if ( $0 ~ "cdrom"){ nodeType=1;}
    if ( $0 ~ "disk"){ nodeType=2;}
    if ( $0 ~ "scsi"){nodeType=-1;}
    
    
    name="";
    nodesFound++;
    next;
  }
  /description:/{description=$2} 
  /product:/{product=$2}
  /vendor:/{vendor=$2} 
  /bus info:/{bus=$2} 
  /logical name:/{ if (name == "") {name=$2 } logicalName=$2;}
  /serial:/{serial=$2} 
  /size:/{size=$2} 
  /capacity:/{capacity=$2}
  '
}


